<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>burakkose:blog - Burak</title><link>https://www.koseburak.net/</link><description></description><lastBuildDate>Sun, 29 Apr 2018 16:00:00 +0200</lastBuildDate><item><title>A'dan Z'ye Amazon Mülakat Tecrübem</title><link>https://www.koseburak.net/blog/amazon-mulakat/</link><description>&lt;p&gt;Nisan ayında Amazon’un Dublin ofisinde mülakat yaptıktan ve teklif aldıktan sonra, yaşadığım tecrübeyi paylaşma kararı verdim.
&lt;center&gt;
&lt;img alt="amazon-logo-300px" src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Amazon_logo_plain.svg/320px-Amazon_logo_plain.svg.png"&gt;
&lt;/center&gt;
Bir gün merakımdan Amazon’nun kariyer &lt;a href="https://www.amazon.jobs/"&gt;sayfasında&lt;/a&gt; açık olan ilanlara bakıyordum. O gün gözüme bir pozisyon takıldı, iş ilanında güvenlik alanındaki verilerin analizi için uğraşacak, Scala ve Spark bilen kişi arıyorlardı. Çok sıradan …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 29 Apr 2018 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2018-04-29:/blog/amazon-mulakat/</guid><category>amazon</category><category>bigdata</category><category>spark</category><category>scala</category><category>interview</category></item><item><title>Type class nedir? - FP</title><link>https://www.koseburak.net/blog/typeclass/</link><description>&lt;p&gt;Yazıya başlamadan önce belirtmem gerekir ki örnekleri Scala üzerinden verdiğim için Scala ve temel düzeyde implicit kavramını bildiğinizi varsaymaktayım.&lt;/p&gt;
&lt;p&gt;Type class'ı basitçe anlatmak gerekirse, uygulamamız sahip olmak istediğimiz bazı işlevsellikleri sağlayan bir arayüzdür. Scala'da çoğunlukla trait ile birlikte en az bir type parametresi ile tanımlanır. En önemli özelliklerinden biri &lt;code&gt;ad-hoc …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sat, 10 Jun 2017 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2017-06-10:/blog/typeclass/</guid><category>fp</category><category>scala</category></item><item><title>Algebraic Data Types nedir? - FP</title><link>https://www.koseburak.net/blog/algebraic-data-types/</link><description>&lt;p&gt;İsmi bu kadar karmaşık olup da arkasındaki fikir bu kafar basit olan bir yapı olduğunu sanmıyorum. Olay tamamen veriyi modellemektir, davranışlar ile ilgilenilmez. Veri modellenirken mantıksal ve(and) ile veya(or) işleminden yararlanılır. Kısaca örnek vermek gerekirse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sealed trait Şekil
case class Çember(v: Double) extends Şekil
case class Üçgen …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Fri, 09 Jun 2017 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2017-06-09:/blog/algebraic-data-types/</guid><category>fp</category><category>scala</category></item><item><title>Apache Spark - Part 2 : Resilient Distributed Datasets</title><link>https://www.koseburak.net/blog/apache-spark-part2/</link><description>&lt;p&gt;&lt;a href="https://www.koseburak.net/blog/apache-spark-part1/"&gt;Bir önceki yazımda&lt;/a&gt; Apache Spark kurlumunu ve basit bir kaç örneği incelemiştik. Bu yazıda RDD("resilient distributed dataset) yani esnek dağıtık veri kümelerini inceliyor olacağız.&lt;/p&gt;
&lt;p&gt;RDD'ler basitçe değişmez(immutable) dağıtık obje koleksiyonlarıdır ve her biri farklı düğümlerde hesaplanmak üzere çeşitli parçalara bölünmüş şekildedir. Python, Scala veya Java'nın sahip olduğu tüm …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Fri, 23 Oct 2015 23:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-23:/blog/apache-spark-part2/</guid><category>bigdata</category><category>datasciece</category><category>spark</category><category>python</category></item><item><title>En uzun artan altdizi(LIS) - Dinamik Programlama</title><link>https://www.koseburak.net/blog/lis/</link><description>&lt;p&gt;Bir dizi içerisinde en uzun artan altdiziyi bulmayı amaçlayan bir problemdir. Örneğin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Input:
    {10, 22, 9, 33, 21, 50, 41, 60, 80}
Output:
    6{10, 22, 33, 50, 60, 80}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.koseburak.net/blog/lcs/"&gt;LCS&lt;/a&gt; algoritmasına benzer bir yol izleyeceğiz. Kod anlaşılır durumda, çözüm aşağıdadır.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def lis(arr):
    lis = [1] * len(arr)

    for i …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Fri, 23 Oct 2015 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-23:/blog/lis/</guid><category>algorithm</category><category>dynamic programming</category></item><item><title>En uzun ortak altdizi(LCS) - Dinamik Programlama</title><link>https://www.koseburak.net/blog/lcs/</link><description>&lt;p&gt;Bilgisayar bilimlerinde önemli bir yere sahip olan bu problemde, verilen iki dizgide de ortak olarak bulunan ve aynı yönde sıralanmış dizgiler bütünü elde edilmeye çalışılmaktadır.&lt;/p&gt;
&lt;p&gt;Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; “ABCDGH” ve “AEDFHR” için “ADH”
 “AGGTAB” ve “GXTXAYB” için “GTAB”
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dosyalar arasındaki farkları, değişiklikleri elde etmede ve özellikle bioinformatik alanında sıkça karşılaşılan bir çözümdür …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 20 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-20:/blog/lcs/</guid><category>algorithm</category><category>dynamic programming</category><category>bioinformatic</category></item><item><title>Sieve of Eratosthenes - Matematik Problemi</title><link>https://www.koseburak.net/blog/sieve-of-eratosthenes/</link><description>&lt;p&gt;Verilen bir &lt;code&gt;n&lt;/code&gt; sayısı var ve bu sayıya kadar olan tüm asal sayıların elde edilmesi için sunulmuş en efektif çözümdür &lt;a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"&gt;(ref: Wiki)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="gif" src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif"&gt;&lt;/p&gt;
&lt;p&gt;Algoritma şu şekilde çalışır.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2'den n'e kadar bir liste yaratılır. (2,3,4,5,6...n)&lt;/li&gt;
&lt;li&gt;p = 2 yapılarak ilk asal sayı 2 ilan edilir.&lt;/li&gt;
&lt;li&gt;2p,3p,4p …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 20 Oct 2015 16:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-20:/blog/sieve-of-eratosthenes/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Sayının faktoriyelinde sonda bulunan 0'ların sayısı - Matematik Problemi</title><link>https://www.koseburak.net/blog/faktoriyel-0s-count/</link><description>&lt;p&gt;Verilen sayının faktoriyelinde sonda bulunan sıfırların sayısını bulmamız gerekiyor.&lt;/p&gt;
&lt;p&gt;Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2432902008176640000&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;En basit hali ile çözüm, sayının faktoriyelini hesaplamak ve sondaki sıfıların sayısını saymak. Masraflı ve büyük sayılar için çalışmayacak bir yöntem …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 20 Oct 2015 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-20:/blog/faktoriyel-0s-count/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Hileli parayı hilesiz yapmak - Matematik Problemi</title><link>https://www.koseburak.net/blog/0-1-50/</link><description>&lt;p&gt;Verilen bir fonksiyon yazı tura işlemini %60 yazı %40 tura gelecek şekilde gerçekleştiriyor. Bu verilen fonksiyonu kullanarak bu işlemi nasıl hilesiz yapabiliriz?&lt;/p&gt;
&lt;p&gt;Paranın %60 olasılıkla 0, %40 olasılık ile 1 döndürdüğünü biliyoruz. Çözüm olarak bu fonksiyonu iki kere çağıracağız. Eğer sonuçlar (1,0) veya (0,1) ise problem yok, direk …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 20 Oct 2015 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-20:/blog/0-1-50/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Hedef puana kaç farklı şekilde ulaşılır? - Dinamik Programlama</title><link>https://www.koseburak.net/blog/nth-score/</link><description>&lt;p&gt;3, 5 ve 10 puan almanın mümkün olduğu ve hedef puana bu puan gruplarını kullanarak kaç farklı şekilde ulaşılabileceğini bulacağız.&lt;/p&gt;
&lt;p&gt;Örnek;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 19 Oct 2015 23:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-19:/blog/nth-score/</guid><category>algorithm</category><category>dynamic programming</category></item><item><title>N. basamağa kaç adımda ulaşılabilir? - Dinamik Programlama</title><link>https://www.koseburak.net/blog/nth-stair/</link><description>&lt;p&gt;N adet basamağa sahip bir merdivende, en alt noktadan üst noktaya her seferinde en fazla bir veya iki adım atarak kaç farklı şekilde ulaşabileceğimizi bulacağız.&lt;/p&gt;
&lt;p&gt;&lt;img alt="basamak" src="/images/DynamicProgramming/stairs.gif"&gt; Örneğin yadaki resim için 3 adet çözüm vardır.&lt;/p&gt;
&lt;p&gt;Daha fazla örnek;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Sadece&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;adımda&lt;/span&gt; &lt;span class="n"&gt;ulaşılır&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 19 Oct 2015 23:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-19:/blog/nth-stair/</guid><category>algorithm</category><category>dynamic programming</category></item><item><title>Fibonacci sayısı oluşturma - Matematik Problemi</title><link>https://www.koseburak.net/blog/fibonacci/</link><description>&lt;p&gt;Fibonacci sayılarını oluşturmanın birden fazla yöntemi vardır.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 141, ……..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fn = Fn-1 + Fn-2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;F0 = 0 and F1 = 1.&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Metot 1 ( recursion )&lt;/h3&gt;
&lt;p&gt;Yukarıda verilmiş olan matematik ifadesinin direkt olarak uygulanmış halidir. İşe yarar ama çok fazla maliyetlidir.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;T(n) = T(n-1 …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 18 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-18:/blog/fibonacci/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Sıralı olarak verilmiş üç diziden ortak elemanları bulma - Arama Algoritması</title><link>https://www.koseburak.net/blog/search-common-element-three/</link><description>&lt;p&gt;Artan sırada verilmiş üç dizi içerisinde bulunan ortak elemanı bulmamıza yarayan algoritmaya bakacağız.&lt;/p&gt;
&lt;p&gt;Örneğin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ar1[] = {1, 5, 10, 20, 40, 80}
ar2[] = {6, 7, 20, 80, 100}
ar3[] = {3, 4, 15, 20, 30, 70, 80, 120}
Output: 20, 80

ar1[] = {1, 5, 5}
ar2[] = {3, 4, 5, 5, 10}
ar3 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 18 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-18:/blog/search-common-element-three/</guid><category>algorithm</category><category>searching</category></item><item><title>Suffix Array - String Algoritmaları</title><link>https://www.koseburak.net/blog/suffix-array/</link><description>&lt;p&gt;Suffix dizisi, verilmiş olarak verilen stringe ait tüm suffixlerin alfabetik olarak sıralanmış halidir. Suffix array eğer elinizde bir suffix tree varsa, bu ağaç üzerinde DFS algoritmasını işletilmesi ile elde edilebilir.&lt;/p&gt;
&lt;p&gt;Suffix array veri yapısının, suffix tree'den avantajları, geliştirilmiş bellek performansı ve keşleme özelliğidir.&lt;/p&gt;
&lt;p&gt;Önreğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;banana&amp;quot; için.

0 banana                          5 a …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 18 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-18:/blog/suffix-array/</guid><category>algorithm</category><category>string</category><category>searching</category></item><item><title>Sıralı iki dizi içerisinde seçilen ikili toplamının hedef sayıya en yakın olması - Arama Algoritması</title><link>https://www.koseburak.net/blog/find-closest-pair-sorted/</link><description>&lt;p&gt;Hoşuma giden problem türlerinden olan yakın ikili sorularından biri. Bu problemde girdi olarak verilen iki tane sıralanmış dizi ve bir hedef numarası bulunuyor ve dizilerden seçilen hangi iki elemanın toplamının hedef elemana en yakın sayı olacağını bulmamız gerekiyor.&lt;/p&gt;
&lt;p&gt;Örnek olarak;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;ar1&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
        &lt;span class="n"&gt;ar2&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sat, 17 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-17:/blog/find-closest-pair-sorted/</guid><category>algorithm</category><category>searching</category></item><item><title>Bit işlemleri yardımıyla 7 ile çarpma işlemi - Matematik Problemi</title><link>https://www.koseburak.net/blog/carp-yedi/</link><description>&lt;p&gt;Bir sayıyı yedi ile çarpmanın bitwise karşılığı.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;#39;__main__&amp;#39;:
    num = 3
    print((num &amp;lt;&amp;lt; 3) - num)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not: Sadece pozitif sayılar için.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Thu, 15 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-15:/blog/carp-yedi/</guid><category>algorithm</category><category>mathematical</category><category>bit</category></item><item><title>Prim Algoritması - Greedy Yaklaşımı</title><link>https://www.koseburak.net/blog/prim-mst/</link><description>&lt;p&gt;Tıpkı Kruskal algoritmasında olduğu gibi Prim algoritmasında da amaç en kısa yol ağacını bulmaktır ve greedy yaklaşımı ile çözülür.&lt;/p&gt;
&lt;p&gt;Algoritma aşağıdaki şekilde çalışır.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ağaca eklenmiş tüm düğümleri tutacak bir küme oluştur(&lt;code&gt;mst_set&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Başlangıçta tüm düğümlere sonsuz değeri verin sadece içlerinden bir tanesini seçmek için 0 değeri verin.&lt;/li&gt;
&lt;li&gt;Eğer &lt;code&gt;1.&lt;/code&gt; adımda …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Wed, 14 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-14:/blog/prim-mst/</guid><category>algorithm</category><category>greedy</category><category>graph theory</category></item><item><title>Veri akışının aritmetik ortalaması - Matematik Problemi</title><link>https://www.koseburak.net/blog/stream-ortalama/</link><description>&lt;p&gt;Bu problemde elimize, bir kaynaktan gelen sürekli veriler var yani hep bir sayı akışı var. Bizden her gelen yeni sayı için o anki aritmetik ortalama istenmektedir.&lt;/p&gt;
&lt;p&gt;Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Akış ... 10, 20, 30, 40, 50, 60, …
10 geldiğinde ortalama 10.00
20 geldiğinde ortalama 15.00
30 geldiğinde ortalama 20.00
40 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Wed, 14 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-14:/blog/stream-ortalama/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Bozuk para problemi - Greedy Yaklaşımı</title><link>https://www.koseburak.net/blog/bozuk-para/</link><description>&lt;p&gt;Bize verilen bir miktar para var ve bu miktarı en az sayıda banknot ile karşılamak istiyoruz. Gerçek hayattada sıkça karşılaşılan bir problemi aslında greedy yaklaşımı ile çözüyoruz.&lt;/p&gt;
&lt;p&gt;Örneğin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="n"&gt;TL&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="n"&gt;TL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;TL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="n"&gt;TL&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;121&lt;/span&gt; &lt;span class="n"&gt;TL&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;TL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="n"&gt;TL …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 13 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-13:/blog/bozuk-para/</guid><category>algorithm</category><category>greedy</category></item><item><title>Sayı fibonacci sayısı mı? - Matematik Problemi</title><link>https://www.koseburak.net/blog/fibo-kontrol/</link><description>&lt;p&gt;Verilen sayının fibonacci sayısı olup olmadığını anlamanın basit bir yolu var.&lt;/p&gt;
&lt;p&gt;İsterseniz sırayla kendi sayınıza kadar fibonacci sayılarını oluşturup kontrol ederek gidebilirsiniz. Tabi aşırı maliyetli bir çözüm olur, ya da matematikten faydalanırsınız.&lt;/p&gt;
&lt;p&gt;Bu çözüme tam kare çözümü denmektedir. Kontrol için aşağıdaki eşitliği kullancağız.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(5*n^2 + 4) veya (5*n …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 12 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-12:/blog/fibo-kontrol/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Çarpma ve bölme işlemi kullanmadan üs alma - Matematik Problemi</title><link>https://www.koseburak.net/blog/pow-without/</link><description>&lt;p&gt;Üs alma işlemi problemlerine farklı bir yaklaşım sunan bu problemde, çarpma(&lt;code&gt;*&lt;/code&gt;) ve bölme(&lt;code&gt;/&lt;/code&gt;) işlemi kullanmadan üs alma işlemine bakacağız.&lt;/p&gt;
&lt;p&gt;Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5^6 işlemi için;
result = 0
1.) 5 kere 5 ekle (5^2) = 25
2.) 5 kere 25 ekle (5^3) = 125
3.) 5 kere 125 ekle (5^4) = 625 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 12 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-12:/blog/pow-without/</guid><category>algorithm</category><category>mathematical</category></item><item><title>Kruskal Algoritması - Greedy Yaklaşımı</title><link>https://www.koseburak.net/blog/kuruskal-mst/</link><description>&lt;p&gt;En küçük yol ağacı problemine(minimum spanning tree) üretilmiş bir çözümdür. En basit graf algoritmalarından biridir. Greedy yaklaşımı ile çözüme ulaşılır. Amaç bir graf içerisinde tüm düğümleri kapsayan minimum maliyete sahip ağacı elde etmektir.&lt;/p&gt;
&lt;p&gt;Aşağıda kabaca algoritmanın çalışmasını anlayabilirsiniz.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tüm kenarları maliyetlerine göre küçükten büyüğe doğru sıralay&lt;/li&gt;
&lt;li&gt;En düşük maliyetli …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 11 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-11:/blog/kuruskal-mst/</guid><category>algorithm</category><category>greedy</category><category>graph theory</category></item><item><title>En basit hali ile text arama işlemi - String Algoritmaları</title><link>https://www.koseburak.net/blog/naive-search-string/</link><description>&lt;p&gt;Text işlemlerinde, bir dizgi içerisinde dizgi aramadaki en basit çözümü inceleyeceğiz.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;txt[] =  &amp;quot;THIS IS A TEST TEXT&amp;quot;
pat[] = &amp;quot;TEST&amp;quot;
Output: 10
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;txt[] =  &amp;quot;AABAACAADAABAAABAA&amp;quot;
pat[] = &amp;quot;AABA&amp;quot;
Output: 0,9,13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Çözüm aşağıdaki gibi olacaktır.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def search(text, pattern):
    m, n = len(pattern), len(text)
    for i in range(n - m + 1 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 11 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-11:/blog/naive-search-string/</guid><category>algorithm</category><category>string</category><category>searching</category></item><item><title>İş planlama problemi - Greedy Yaklaşımı</title><link>https://www.koseburak.net/blog/is-planlama/</link><description>&lt;p&gt;İş planlanması ile ilgili olan bir problem. Girdi olarak son teslim tarihine ve kazanç bilgilerine sahip olan işler veriliyor. En büyük kazancı nasıl elde edebileceğimizi bulmamız gerekiyor.&lt;/p&gt;
&lt;p&gt;Örnek olarak ;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;JobID&lt;/span&gt;    &lt;span class="n"&gt;Son&lt;/span&gt; &lt;span class="n"&gt;Tarih&lt;/span&gt;     &lt;span class="n"&gt;Kazanç&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;        &lt;span class="mi"&gt;4&lt;/span&gt;            &lt;span class="mi"&gt;20&lt;/span&gt;   
    &lt;span class="n"&gt;b&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;            &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;            &lt;span class="mi"&gt;40&lt;/span&gt;  
    &lt;span class="n"&gt;d&lt;/span&gt;        &lt;span class="mi"&gt;1&lt;/span&gt;            &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;   


&lt;span class="n"&gt;Input …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 11 Oct 2015 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-11:/blog/is-planlama/</guid><category>algorithm</category><category>greedy</category></item><item><title>Etkinlik paylaşım problemi - Greedy Yaklaşımı</title><link>https://www.koseburak.net/blog/etkinlik-secim-problemi/</link><description>&lt;p&gt;Etkinlik paylaşım problemi klasik bir açgözlü(greedy) yaklaşımı ile çözülen bir problemdir.Greedy kısaca parça parça çözüme ulaşılan ve her bir aşamada o anki en optimum seçeneği seçemedir.&lt;/p&gt;
&lt;p&gt;Eğer bir problemi Greedy yaklaşımı ile çözebiliyorsak muhtemelen o problemin çözümü diğer çözüm yöntemlerine göre en optimum çözüm olacaktır fakat her durumda …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 11 Oct 2015 10:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-11:/blog/etkinlik-secim-problemi/</guid><category>algorithm</category><category>greedy</category></item><item><title>Üs alma işlemi (a^x) - Divide and Conquer</title><link>https://www.koseburak.net/blog/pow-daq/</link><description>&lt;p&gt;Üs alma işlemi kullanılan programlama dilinin standart olarak verdiği işlemler ile gayet kolay olarak yapılabilen bir işlemdir.En basit hali ile çözüm şu şekildedir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def brute(num, x):
    result = 1
    for i in range(x):
        result *= num
    return result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bu çözüm iteratif olarak yazılmış ve &lt;code&gt;O(n)&lt;/code&gt; karmaşıklığına sahip hoş …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 11 Oct 2015 08:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-11:/blog/pow-daq/</guid><category>algorithm</category><category>divide and conquer</category></item><item><title>Neredeyse sıralı dizi içerisinde arama - Arama Algoritması</title><link>https://www.koseburak.net/blog/almost-sorted-search/</link><description>&lt;p&gt;Ufak bir işlem sonrası sıralanmış dizinin bazı elemanlarının yerleri karıştırılıyor. Örneğin &lt;code&gt;i.&lt;/code&gt; pozisyonda olması gereken eleman &lt;code&gt;i-1&lt;/code&gt; ya da &lt;code&gt;i+1&lt;/code&gt; pozisyonunda bulunuyor. Hedef olarak verilen sayının dizi içerisindeki pozisyonunun bulunması amaçlanıyor.&lt;/p&gt;
&lt;p&gt;Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="o"&gt;},&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sat, 10 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-10:/blog/almost-sorted-search/</guid><category>algorithm</category><category>searching</category></item><item><title>Girilen sayıdan bir sonraki büyük sayıyı bulma - Matematik Problemi</title><link>https://www.koseburak.net/blog/next-num/</link><description>&lt;p&gt;String olarak verilen sayının bir sonraki büyük saıyı ekrana bastıran, eğer şartlar uygun değilse imkansız yazan problemi inceleyeceğiz.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;218765&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;251678&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1243&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;4321&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Imkansız&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;534976&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;536479&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Çözüm için;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Eğer tüm sayılar azalan sırada ise 'Imkansız' basılır.&lt;/li&gt;
&lt;li&gt;Eğer tüm …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Thu, 08 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-08:/blog/next-num/</guid><category>algorithm</category><category>mathematical</category></item><item><title>KMP Algoritmasi - String Algoritmaları</title><link>https://www.koseburak.net/blog/kmp/</link><description>&lt;p&gt;Bir diğer string arama algoritmalarından olan &lt;code&gt;KMP&lt;/code&gt; algoritmasına bakacağız.&lt;/p&gt;
&lt;p&gt;Örnek olarak;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;txt =  &amp;quot;THIS IS A TEST TEXT&amp;quot;
pat = &amp;quot;TEST&amp;quot;
Output : 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ve&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;txt =  &amp;quot;AABAACAADAABAAABAA&amp;quot;
pat = &amp;quot;AABA&amp;quot;
Output : 0, 9, 13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Bir önceki &lt;a href="https://www.koseburak.net/blog/naive-search-string/"&gt;yazıda&lt;/a&gt; en kaba hali ile bir text içerisinde nasıl başka bir text aramasının yapılacağını incelemiştik. O algoritma &lt;code&gt;O …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Wed, 07 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-07:/blog/kmp/</guid><category>algorithm</category><category>string</category><category>searching</category></item><item><title>Sıralı dizi içerisinde hedef sayıya en yakın k sayı - Arama Algoritması</title><link>https://www.koseburak.net/blog/search-k-closest/</link><description>&lt;p&gt;Sıralı olarak verilen bir dizi içerisinde, hedef olarak belirtilen sayıya en yakın(eşit değil) k tane elemanı elde etmeye yarayan problemdir.&lt;/p&gt;
&lt;p&gt;Problemin basit olarak çözümü, k tane elemanın bulunması için diziyi lineer olarak aramaktan geçer.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;İlk elemandan başlayarak geçit alanına kadar gel(Geçit alanı: Sonraki elemanın büyük, üzerinde bulunan elemanın …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 06 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-06:/blog/search-k-closest/</guid><category>algorithm</category><category>searching</category></item><item><title>Hangi sıralama algoritması belleğe en az sayıda yazma yapar?</title><link>https://www.koseburak.net/blog/which-sorting-min-memory/</link><description>&lt;p&gt;Hafızaya yazma işlemini azaltmak, büyük veri kümeeleri üzerinde uğraşmanın maliyetli olduğu EEPROMs ve ya flash gibi platformlar için kazançlıdır.&lt;/p&gt;
&lt;p&gt;Sıralama algoritmaları arasında &lt;code&gt;Selection Sort&lt;/code&gt; agoritmasının en az sayıda yazma işlemi yaptığını(&lt;code&gt;O(n)&lt;/code&gt;) biliyoruz. Fakat &lt;code&gt;Cycle Sort&lt;/code&gt; neredeyse her zaman &lt;code&gt;Selection Sort&lt;/code&gt; algoritmasına göre daha az sayıda yazma işlemi yapar …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 05 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-05:/blog/which-sorting-min-memory/</guid><category>algorithm</category><category>sorting</category></item><item><title>K. küçük veya büyük sayısı bulmak - Part 1 - Arama Algoritması</title><link>https://www.koseburak.net/blog/search-k-largest-or-smalest/</link><description>&lt;p&gt;Bir dizi ve &lt;code&gt;k&lt;/code&gt; sayısı veriliyor(k &amp;lt; len(dizi)). Cevap olarak dizi içerisinde ki k. küçük veya büyük elemanın bulunması hedefleniyor.&lt;/p&gt;
&lt;p&gt;Örneğin;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Çözüm 1 (Basit Çözüm …&lt;/h3&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 04 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-04:/blog/search-k-largest-or-smalest/</guid><category>algorithm</category><category>searching</category></item><item><title>Sıralama algoritmalarında kararlılık nedir?</title><link>https://www.koseburak.net/blog/stability-sorting/</link><description>&lt;p&gt;Sıralama algoritmalarında bazen kararlılık ile ilgili bir takım bilgiler görürüz.Kısaca açıklamak gerekirse, sırarısz bir dizide aynı değerlere sahip elemanların dizilişi, dizi sıralandığında da korunuyorsa algoritma kararlıdır.&lt;/p&gt;
&lt;p&gt;Kararlı özelliğine sahip algoritmalar; Insertion sort, Merge sort, Bubble sort. Kararsız olanlar; Heap sort, Quick sort.&lt;/p&gt;
&lt;p&gt;Ancak verilen kararlı olmayan aloritmalar kolayca kararlı …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sat, 03 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-03:/blog/stability-sorting/</guid><category>algorithm</category><category>sorting</category></item><item><title>Quick sort için en kötü durum nedir?</title><link>https://www.koseburak.net/blog/worstcase-quicksort/</link><description>&lt;p&gt;Quick sort ortalama zamanda çalıştığında en verimli çalışan ve en çok kullanılan algoritmalardan biridir. Pivot seçiminin ne kadar önemli olduğunu algoritmayı incelediğinizde göreceksiniz.&lt;/p&gt;
&lt;p&gt;En kötü duruma sebebiyet veren şartlar aşağıdadır.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dizi zaten aynı yönde sıralıysa.&lt;/li&gt;
&lt;li&gt;Dizi ters yönde sıralıysa.&lt;/li&gt;
&lt;li&gt;Tüm elemanlar aynıysa&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sat, 03 Oct 2015 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-10-03:/blog/worstcase-quicksort/</guid><category>algorithm</category><category>sorting</category></item><item><title>Apache Spark - Part 1 : Tanıtım</title><link>https://www.koseburak.net/blog/apache-spark-part1/</link><description>&lt;p&gt;Apache Spark,büyük veri işleme amacı ile oluşturulmuş bir Apache projesidir.Scala dili ile yazılmış JVM üzerinde çalışan ve Python, Java, Scala kullanımına olanak sağlayan, "in-memory" yani veriyi bellek içerisinde işleme özelliği ile ön plana çıkan bir projedir.&lt;/p&gt;
&lt;p&gt;Eğer isterseniz kaynak kodları görüntülemek için aşağıdaki adrese göz atabilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/apache/spark"&gt;https://github …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 21 Jun 2015 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2015-06-21:/blog/apache-spark-part1/</guid><category>bigdata</category><category>datasciece</category><category>spark</category><category>python</category></item><item><title>Rastgele Sayı Üretmek</title><link>https://www.koseburak.net/blog/rastgele-sayi/</link><description>&lt;p&gt;Rastgele yani tesadüfen , tesadüfi olarak , ayırmadan , seçmeden
anlamındadır.Çoğumuz yazdığımız kodu test ederken , oyun programlarken
ve çişitli hesaplamarda kullanırız rastgele sayıları.Günlük hayatta
rastgele kavramı insalar için keyfi olarak kullanılır.Aklınızdan bir
sayı tutup söylersiniz bu bir rastgele işlemidir.Peki gerçekten
böylemidir,bilgisayarlar için de durum bu mudur?&lt;/p&gt;
&lt;p&gt;Hep verilen …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Fri, 05 Dec 2014 05:57:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-12-05:/blog/rastgele-sayi/</guid><category>algorithm</category><category>random</category><category>number theory</category></item><item><title>Suffix Tree - String Algoritmaları</title><link>https://www.koseburak.net/blog/suffix-tree/</link><description>&lt;p&gt;Biyoinformatik'de adı sıkça geçen algoritmalardan olan suffix tree veri
yapısı bir dizgi model(pattern) eşleştirme algoritmasıdır.Örneğin
elinizde uzun bir dizgi olsun ve siz bu dizgi içinde alt dizgiler aramak
ve hatta bu dizgilerden kaç adet bulunduğunu öğrenmek istiyorsunuz.İşte
bu veri yapısı bu işlemleri kolaylaştırmak ile birlikte gayet hızlı …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Thu, 04 Dec 2014 00:08:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-12-04:/blog/suffix-tree/</guid><category>algorithm</category><category>string</category><category>searching</category><category>bioinformatic</category></item><item><title>Radix Sort - Sıralama Algoritmaları</title><link>https://www.koseburak.net/blog/radix-sort/</link><description>&lt;p&gt;Türkçe'de taban sıralaması , basamaklı sıralama , kök sıralaması veya
hane sıralaması olarak geçen bu algoritmada sıralanacak olan veriler
hanelerine göre sıralanır.En değersiz olan haneden en değerli haneye
doğru sıralama işlemi yapılır.&lt;/p&gt;
&lt;p&gt;Sıralanacak verilerin tamsayı olduğu durumlarda kullanılan bu algoritma
işlenirken ilk olarak sıralanacak olan veri kümesindeki elemanların en
büyük elemanının …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Wed, 03 Dec 2014 01:53:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-12-03:/blog/radix-sort/</guid><category>algorithm</category><category>sorting</category></item><item><title>Quick Sort - Sıralama Algoritmaları</title><link>https://www.koseburak.net/blog/quick-sort/</link><description>&lt;p&gt;Quick sort, Türkçe hızlı arama olan bu algoritma günümüzde en çok
tercih edilen sıralama algoritmasıdır.1960 yılında C. A. R. Hoare
tarafından ortaya atılmıştır.Bu algoritma yaklaşım bakımından "parçala
ve çözümle" ilkesine göre çalışmaktadır.&lt;/p&gt;
&lt;p&gt;Bu yaklaşım şu şekilde açıklanabilir.Eldeki problem çok daha ufak
problemciklere ayrılır ve bütün bu problemcikler …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Thu, 27 Nov 2014 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-27:/blog/quick-sort/</guid><category>algorithm</category><category>sorting</category></item><item><title>İlk iş kısa süreliler (Shortest Job First)</title><link>https://www.koseburak.net/blog/sjf/</link><description>&lt;p&gt;Bir önceki yazımda cpu zamanlama algoritmalarından olan fcfs
algoritmasından bahsetmiştim.Asıl ismi "shortest next CPU burst
algorithm" olarak geçen ve yine bir cpu zamanlama algoritması olan
Shortest Job First(SJF) yani en kısa iş ilk algoritmasını inceleyelim.&lt;/p&gt;
&lt;p&gt;Bu algoritmada belli bir sırada bekleyen işlerden önce kısa olanların
işlenmesi amaçlanmıştır.Eğer …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Wed, 26 Nov 2014 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-26:/blog/sjf/</guid><category>algorithm</category><category>operating systems</category><category>scheduling</category></item><item><title>Selection Sort - Sıralama Algoritmaları</title><link>https://www.koseburak.net/blog/selection-sort/</link><description>&lt;p&gt;Veri kümesinin sıralı olarak tutulması için geliştirilmiş en basit
sıralama algoritmalarındandır.Türkçe'de seçmeli sıralama , seçerek
sıralama şeklinde kullanılır.Geliştirilen uygulamalarda seçmeli sıralama
kullanmak için düzgün bir analiz yapılması gerekir.Yer değiştirme
sayısındaki sabitlik dolayısı ile büyük sayıda verinin bulunduğu uzun
dosyalarda lineer zamanda sıralama yapılabilir.&lt;/p&gt;
&lt;p&gt;Temel olarak işleyiş şu şekilde …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Tue, 25 Nov 2014 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-25:/blog/selection-sort/</guid><category>algorithm</category><category>sorting</category></item><item><title>Insertion Sort - Sıralama Algoritmaları</title><link>https://www.koseburak.net/blog/insertion-sort/</link><description>&lt;p&gt;Uygulaması kolay olan bu algoritmayı büyük diziler yerine daha küçük
dizilerde kullanıldığında ve özellikle gelen veri kümesinin zaten
sıralanmış veya sıralanmış haline çok yakın olduğunda kullanılır.&lt;/p&gt;
&lt;p&gt;Kararlı bir algoritma olmasıyla birlikle çalışma anında ek bir bellek
ihtiyacı duymayan bu algoritma Türkçe'da yerleştirmeli sıralama ,
eklemeli sıralama ve sokma sıralaması olarak adlandırılabilir …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 24 Nov 2014 16:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-24:/blog/insertion-sort/</guid><category>algorithm</category><category>sorting</category></item><item><title>İlk gelen işi kapar (First Come First Serve)</title><link>https://www.koseburak.net/blog/first-come-first-serve/</link><description>&lt;p&gt;Kısaca FCFS algoritması.İsim benzerliği ve aslında çalışma mantığı
bakımında kuyruk(queue) veri yapısına çok benzer(FIFO).Bilgisayar
alanında özellikle işletim sistemlerinde bir çok alanda kullanılan bir
algoritmadır.Bu algoritmik yaklaşımda bir sıraya ilk girenin işi ilk
halledilmektedir.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Bu şu şekilde açıklanabilir.Mahallenizde bir berber bulunmaktadır fakat
ne yazık ki …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Mon, 24 Nov 2014 01:05:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-24:/blog/first-come-first-serve/</guid><category>algorithm</category><category>operating systems</category><category>scheduling</category></item><item><title>Bubble Sort - Sıralama Algoritmaları</title><link>https://www.koseburak.net/blog/bubble-sort/</link><description>&lt;p&gt;Algoritma yazılarıma sıralama algoritmaları ile başlamak istedim.İlk
olarak bubble sort ile başlamayı düşünürken bundan bir süre önce
izlediğim bir video aklıma geldi.&lt;/p&gt;
&lt;p&gt;Bu videoda Barack Obama'nın başkan seçilmeden önce Google'da yaptığı bir
konuşma geçiyor. Google CEO'su Eric Schmidt ile yaptığı sohbette
Obama'ya bir milyon adet 32-bit integer sayıyı sıralamak …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Sun, 23 Nov 2014 14:19:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-23:/blog/bubble-sort/</guid><category>algorithm</category><category>sorting</category></item><item><title>Arch Linux Nasıl Kurulur</title><link>https://www.koseburak.net/blog/arch-linux-kurulumu/</link><description>&lt;p&gt;&lt;em&gt;Bu yazı Arch Linux 2014 Ağustos kalıbı dikkate alınarak
hazırlanmıştır.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neden Arch , Nedir Bu ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arch Linux "sürekli güncel"(bkz: "rolling release") paket mantığı
üzerine kurulu, belirli bir düzeyde GNU/Linux bilgisi olan kullanıcıları
hedef alan(tamamen göreceli kimileri yeni başlayanlar için ideal olduğu
görüşünde) bağımsız bir dağıtımdır.Arch hızlı, hafif …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Burak</dc:creator><pubDate>Wed, 12 Nov 2014 18:45:00 +0100</pubDate><guid isPermaLink="false">tag:www.koseburak.net,2014-11-12:/blog/arch-linux-kurulumu/</guid><category>archlinux</category></item></channel></rss>